{#
 #  First create a dict holding the entire zone information and create a hash
 #  from it, that it can be compared with subsequent task executions. In this
 #  way the serial will only be updated if there are some content changes.
 #}
{% set _zone_data = {} %}
{% set _ = _zone_data.update({'ttl': gdnsd__include_zone.ttl|d(gdnsd__ttl)}) %}
{% set _ = _zone_data.update({'domain': gdnsd__include_zone.domain|d(ansible_domain)}) %}
{% set _ = _zone_data.update({'reverse_zone': gdnsd__include_zone.reverse_zone|d(gdnsd__default_reverse_zone)}) %}
{% set _ = _zone_data.update({'mname': gdnsd__include_zone.primary_nameserver|d(ansible_hostname + '.' + _zone_data['domain'])}) %}
{% set _ = _zone_data.update({'rname': (gdnsd__include_zone.mailbox|d(gdnsd__mailbox)) + ('' if (gdnsd__include_zone.mailbox|d(gdnsd__mailbox) | regex_search('\.')) else ('.' + _zone_data['domain']))}) %}
{% set _ = _zone_data.update({'refresh': gdnsd__include_zone.refresh|d(gdnsd__refresh)}) %}
{% set _ = _zone_data.update({'retry': gdnsd__include_zone.retry|d(gdnsd__retry)}) %}
{% set _ = _zone_data.update({'expire': gdnsd__include_zone.expire|d(gdnsd__expire)}) %}
{% set _ = _zone_data.update({'minimum': gdnsd__include_zone.negative_cache|d(gdnsd__negative_cache)}) %}
{% set _ = _zone_data.update({'nameservers': []}) %}
{% if gdnsd__include_zone.nameservers|d([]) %}
{%   for _ns in gdnsd__include_zone.nameservers %}
{%     set _ = _zone_data['nameservers'].append(_ns + ('' if (_ns | regex_search('\.')) else ('.' + _zone_data['domain']))) %}
{%   endfor %}
{% else %}
{%   set _ = _zone_data['nameservers'].append(_zone_data['mname']) %}
{% endif %}
{#
 #  Get the network part of the reverse zone to adjust the host records.
 #}
{% set _net_tuples = _zone_data['reverse_zone'].replace('.in-addr.arpa', '').split('.') | length %}
{#
 #  Only create reverse entries if this is a reverse zone.
 #}
{% set _ = _zone_data.update({'records': []}) %}
{% if ('records' in gdnsd__include_zone) and
      (('reverse_zone' in gdnsd__include_zone and gdnsd__include_zone.reverse_zone) or (_zone_data['reverse_zone'] == gdnsd__default_reverse_zone)) %}
{%   for _entry in gdnsd__include_zone.records %}
{#
 #  Add a PTR entry if record type is 'A', `gdnsd__include_zone.do_reverse` is not False
 #  and it's not a wildcard record.
 #}
{%     if (('type' in _entry and _entry.type == 'A') or (not 'type' in _entry)) and
          (('do_reverse' in _entry and _entry.do_reverse) or (not 'do_reverse' in _entry)) and
          (not '*' in _entry.name) %}
{%       if _net_tuples < 3 %}
{%         set _ = _zone_data['records'].append({'name': _entry.target.split('.')[_net_tuples:4] | reverse | join('.'), 'ptrdname': _entry.name + ('' if (_entry.name | regex_search('\.')) else ('.' + _zone_data['domain']))}) %}
{%       else %}
{%         set _ = _zone_data['records'].append({'name': _entry.target.split('.')[3], 'ptrdname': (_entry.name if (_entry.name != '@') else _zone_data['domain'] ) + ('' if (_entry.name | regex_search('\.')) else ('.' + _zone_data['domain']))}) %}
{%       endif %}
{%     endif %}
{%   endfor %}
{% else %}
{#
 #  If no host records are defined, at least add ourself as a PTR record.
 #}
{%   if _net_tuples < 3 %}
{%     set _ = _zone_data['records'].append({'name': ansible_default_ipv4.address.split('.')[_net_tuples:4] | reverse | join('.'), 'ptrdname': (ansible_hostname + '.' + _zone_data['domain'])}) %}
{%   else %}
{%     set _ = _zone_data['records'].append({'name': ansible_default_ipv4.address.split('.')[3], 'ptrdname': (ansible_hostname + '.' + _zone_data['domain'])}) %}
{%   endif %}
{% endif %}
{#
 #  Compare the zone file hash with the current zone data hash and set serial
 #  accordingly
 #}
{% set _zone = {'hash': _zone_data | string | hash('md5')} %}
{% if gdnsd__register_reverse_zone_hash.stdout | length > 0 %}
{%   set _hash_serial = gdnsd__register_reverse_zone_hash.stdout.split(' ')[2:] %}
{#
 #   If the hash hasn't change since the last update also re-use the existing serial
 #}
{%   if _hash_serial[0] == _zone['hash'] %}
{%     set _ = _zone.update({'serial': _hash_serial[1]}) %}
{%   endif %}
{% endif %}
{% if 'serial' not in _zone.keys() %}
{%   set _ = _zone.update({'serial': gdnsd__fact_zone_serial}) %}
{% endif %}
{#
 #  Eventually output the zone data
 #}
; Hash: {{ _zone['hash'] }} {{ _zone['serial'] }}

$TTL {{ _zone_data['ttl'] }}

{{ _zone_data['reverse_zone'] }}. IN SOA {{ _zone_data['mname'] }}. {{ _zone_data['rname'] }}. ( {{ _zone['serial'] }} {{ _zone_data['refresh'] }} {{ _zone_data['retry'] }} {{ _zone_data['expire'] }} {{ _zone_data['minimum'] }} )

{% for _ns in _zone_data['nameservers'] %}
@   IN NS  {{ _ns }}.
{% endfor %}

{% for _record in _zone_data['records'] %}
{{   _record['name'] }} IN PTR {{ _record['ptrdname'] }}.
{% endfor %}
