{#
 #  First create a dict holding the entire zone information and create a hash
 #  from it, that it can be compared with subsequent task executions. In this
 #  way the serial will only be updated if there are some content changes.
 #}
{% set _zone_data = {} %}
{% set _ = _zone_data.update({'ttl': item.ttl|d(gdnsd__ttl)}) %}
{% set _ = _zone_data.update({'domain': item.domain}) %}
{% set _ = _zone_data.update({'mname': item.primary_nameserver|d(ansible_hostname + '.' + _zone_data['domain'])}) %}
{% set _ = _zone_data.update({'rname': (item.mailbox|d(gdnsd__mailbox)) + ('' if (item.mailbox|d(gdnsd__mailbox) | regex_search('\.')) else ('.' + _zone_data['domain']))}) %}
{% set _ = _zone_data.update({'refresh': item.refresh|d(gdnsd__refresh)}) %}
{% set _ = _zone_data.update({'retry': item.retry|d(gdnsd__retry)}) %}
{% set _ = _zone_data.update({'expire': item.expire|d(gdnsd__expire)}) %}
{% set _ = _zone_data.update({'minimum': item.negative_cache|d(gdnsd__negative_cache)}) %}
{% set _ = _zone_data.update({'records': []}) %}
{#
 #  Make sure there is at least one NS entry.
 #}
{% if item.nameservers|d([]) %}
{%   for _ns in item.nameservers %}
{%     set _ = _zone_data['records'].append({'name': '@', 'type': 'NS', 'nsdname': _ns}) %}
{%   endfor %}
{% else %}
{%   set _ = _zone_data['records'].append({'name': '@', 'type': 'NS', 'nsdname': _zone_data['mname']}) %}
{% endif %}
{#
 #  Add host records. If no host records are defined, at least add ourself as a A record.
 #}
{% if 'records' in item %}
{%   for _entry in item.records %}
{%     set _rr = {'type': _entry.type|d('A'), 'target': _entry.target} %}
{%     for _key in [ 'name', 'port', 'preference', 'ttl', 'weight' ] %}
{%       if _key in _entry %}
{%         set _ = _rr.update({_key: _entry[_key]}) %}
{%       endif %}
{%     endfor %}
{%     set _ = _zone_data['records'].append(_rr) %}
{%   endfor %}
{% else %}
{%   set _ = _zone_data['records'].append({'name': ansible_hostname, 'type': 'A', 'target': ansible_default_ipv4.address}) %}
{% endif %}
{#
 #  Compare the zone file hash with the current zone data hash and set serial
 #  accordingly
 #}
{% set _zone = {'hash': _zone_data | string | hash('md5')} %}
{% for _result in gdnsd__register_forward_hashes.results %}
{%   if _result.item.domain == _zone_data['domain'] %}
{%     set _hash_serial = _result.stdout.split(' ')[2:] %}
{%     if _hash_serial and _hash_serial[0] == _zone['hash'] %}
{%       set _ = _zone.update({'serial': _hash_serial[1]}) %}
{%     else %}
{%       set _ = _zone.update({'serial': gdnsd__fact_zone_serial}) %}
{%     endif %}
{%   endif %}
{% endfor %}
{#
 #  Eventually output the zone data
 #}
; Hash: {{ _zone['hash'] }} {{ _zone['serial'] }}

$TTL {{ _zone_data['ttl'] }}

{{ _zone_data['domain'] }}. IN SOA {{ _zone_data['mname'] }}. {{ _zone_data['rname'] }}. ( {{ _zone['serial'] }} {{ _zone_data['refresh'] }} {{ _zone_data['retry'] }} {{ _zone_data['expire'] }} {{ _zone_data['minimum'] }} )

{% for _record in _zone_data['records'] %}
{%   if (_record['type'] == 'A') or (_record['type'] == 'TXT') %}
{{     _record['name'] }} {{ _record['ttl']|d('') }} IN {{ _record['type'] }} {{ _record['target'] }}
{%   elif _record['type'] == 'CNAME' %}
{{     _record['name'] }} {{ _record['ttl']|d('') }} IN {{ _record['type'] }} {{ _record['target'] }}{{ '.' if (_record['target'] | regex_search('\.')) else '' }}
{%   elif _record['type'] == 'MX' %}
@ {{ _record['ttl']|d('') }} IN {{ _record['type'] }} {{ _record['preference']|d(5) }} {{ _record['target'] }}{{ '.' if (_record['target'] | regex_search('\.')) else '' }}
{%   elif _record['type'] == 'NS' %}
{{     _record['name'] }} IN {{ _record['type'] }} {{ _record['nsdname'] }}{{ '.' if (_record['nsdname'] | regex_search('\.')) else '' }}
{%   elif _record['type'] == 'SRV' %}
{{     _record['name'] }} {{ _record['ttl']|d('') }} IN {{ _record['type'] }} {{ _record['preference']|d(5) }} {{ _record['weight']|d(0) }} {{ _record['port'] }} {{ _record['target'] }}{{ '.' if (_record['target'] | regex_search('\.')) else '' }}
{%   endif %}
{% endfor %}
